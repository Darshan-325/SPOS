************************ Dynamic Link Library ***************************
********* testJni1.java ************
public class testJni1
{
static{
System.loadLibrary("native");
}
public static void main(String args[])
{
System.out.println("Addition is "+ new testJni1().add(10,20));
}
private native int add(int n1,int n2);
}

****** Compiling the file ********
Command:-
gescoe@gescoe-optiplex-3020:~/Documents/AY21-22/LP-1$ javac -h . testJni1.java

********** testJni1.c **********
#include<jni.h>
#include<stdio.h>
#include "testJni1.h" JNIEXPORT jint JNICALL Java_testJni1_add
(JNIEnv *env, jobject thisobj, jint n1, jint n2)
{
jint res;
res=n1+n2;
return res;
}
 
******** Compiling the file *********
Command :-
gescoe@gescoe-optiplex-3020:~/Documents/AY21-22/LP-1$ gcc -c -fPIC -I
/usr/lib/jvm/java-1.8.0-openjdk-amd64/include
-I/usr/lib/jvm/java-1.8.0-openjdk-amd64/include/linux testJni1.c -o testJni1.o

***** After That RUn These Two Commands *******

gescoe@gescoe-optiplex-3020:~/Documents/AY21-22/LP-1$ gcc -shared -fPIC -o
libnative.so testJni1.o -lc

gescoe@gescoe-optiplex-3020:~/Documents/AY21-22/LP-1$ java -Djava.library.path=. testJni1



**************************ALL ACTIONS testJni1.java****************************************

import java.util.*;
public class testJni1
{
static{
System.loadLibrary("native");
}
public static void main(String args[])
{
	Scanner sc=new Scanner(System.in);
	System.out.println("enter first no:");
	int n1=sc.nextInt();
	System.out.println("enter Second no:");
	int n2=sc.nextInt();
	int ch;
	do
	{
		System.out.println("1.add");
		System.out.println("2.sub");
		System.out.println("3.multi");
		System.out.println("4.squ");
		System.out.println("5.exit");
		System.out.println("enter your choice:");
		ch=sc.nextInt();
		switch(ch)
		{
			case 1:
			System.out.println("add is "+ new testJni1().add(n1,n2));
			break;
			
			case 2:
			System.out.println("sub is "+ new testJni1().sub(n1,n2));
			break;
			
			case 3:
			System.out.println("multi is "+ new testJni1().multi(n1,n2));
			break;
			
			case 4:
			System.out.println("square is "+ new testJni1().squ(n1));
			break;
		}
	}while(ch!=5);
			

	
}
private native int add(int n1,int n2);
private native int sub(int n1,int n2);
private native int multi(int n1,int n2);
private native int squ(int n1);
}


****** Compiling the file ********
Command:-
gescoe@gescoe-optiplex-3020:~/Documents/AY21-22/LP-1$ javac -h . testJni1.java

**************************ALL ACTIONS testJni1.c ****************************************

#include<jni.h>
#include<stdio.h>
#include "testJni1.h" JNIEXPORT jint JNICALL Java_testJni1_add // Correct path to your header file
JNIEXPORT jint JNICALL Java_testJni1_add(JNIEnv * env, jobject thisobj, jint n1, jint n2)
{
jint res;
res=n1+n2;
return res;
}

JNIEXPORT jint JNICALL Java_testJni1_sub(JNIEnv * env, jobject thisobj, jint n1, jint n2)
{
jint res;
res=n1-n2;
return res;
}


JNIEXPORT jint JNICALL Java_testJni1_multi(JNIEnv * env, jobject thisobj, jint n1, jint n2)
{
jint res;
res=n1*n2;
return res;
}

JNIEXPORT jint JNICALL Java_testJni1_squ(JNIEnv *env, jobject thisobj, jint n1)
{
jint res;
res=n1*n1;
return res;
}

************************* Compiling the file *************************
Command :-
gescoe@gescoe-optiplex-3020:~/Documents/AY21-22/LP-1$ gcc -c -fPIC -I
/usr/lib/jvm/java-1.8.0-openjdk-amd64/include
-I/usr/lib/jvm/java-1.8.0-openjdk-amd64/include/linux testJni1.c -o testJni1.o

**************** After That RUn These Two Commands *******************

gescoe@gescoe-optiplex-3020:~/Documents/AY21-22/LP-1$ gcc -shared -fPIC -o
libnative.so testJni1.o -lc

gescoe@gescoe-optiplex-3020:~/Documents/AY21-22/LP-1$ java -Djava.library.path=. testJni1


*********************************** Pass 1 ***************************************

from os import sep, write
import pdb


class Mnemonics:
    def __init__(self):
        self.AD = {
            "START": 1,
            "END": 2,
            "ORIGIN": 3,
            "EQU": 4,
            "LTORG": 5
        }
        self.RG = {
            "AREG": 1,
            "BREG": 2,
            "CREG": 3,
            "DREG": 4
        }
        self.DL = {
            "DC": 1,
            "DS": 2
        }
        self.IS = {
            "STOP": 0,
            "ADD": 1,
            "SUB": 2,
            "MULT": 3,
            "MOVER": 4,
            "MOVEM": 5,
            "COMP": 6,
            "BC": 7,
            "DIV": 8,
            "READ": 9,
            "PRINT": 10
        }
        self.CC = {
            "LT": 1,
            "LE": 2,
            "EQ": 3,
            "GT": 4,
            "GE": 5,
            "ANY": 6
        }

    def getClassType(self,string):
        if string in self.AD:
            return "AD"
        elif string in self.CC:
            return "CC"
        elif string in self.DL:
            return "DL"
        elif string in self.IS:
            return "IS"
        elif string in self.RG:
            return "RG"
        else:
            return ""

    def getMachineCode(self,string):
        if string in self.AD:
            return self.AD[string]
        elif string in self.CC:
            return self.CC[string]
        elif string in self.DL:
            return self.DL[string]
        elif string in self.IS:
            return self.IS[string]
        elif string in self.RG:
            return self.RG[string]
        else:
            return -1


class pass1:
    def __init__(self):
        self.lookup = Mnemonics()
        self.symbolTable = {}
        self.literalTable = {}
        self.litTableIndex = 0 
        self.poolTable = [0]
        self.IC = [] 
        self.location = 0
        self.litTabPtr = 0 
        self.InputFile = open("D:\LP Practical 1/input.txt","r")
        self.literalTableFile = open("literalTable.txt","w")
        self.symbolTableFile = open("symbolTable.txt","w")
        self.poolTableFile = open("poolTable.txt","w")
        self.ICFile = open("intermediateCode.txt","w")


    def calculateLocation(self,string):
        if "+" in string:
            string = string.split("+")
            return self.symbolTable[string[0]] + int(string[1])
        elif "-" in string:
            string = string.split("-")
            return self.symbolTable[string[0]] - int(string[1])
        else:
            return self.symbolTable[string]

    def parseFile(self):
        for line in self.InputFile.readlines():
            self.IC.append([])
            line = line.strip("\n")
            line = line.split("\t")



            if line[0] != "":
                if line[0] in self.symbolTable:
                    self.symbolTable[line[0]] = self.location 
                else:
                    self.symbolTable[line[0]] = self.location 

            if line[1] == "START":
                self.location = int(line[2])
                self.IC[-1].append(('AD',1))
                self.IC[-1].append(("C",int(line[2])))
            elif line[1] == "LTORG":
                
                for i in range(self.poolTable[-1],len(self.literalTable)):
                    self.literalTable[i][1] = self.location
                    self.IC[-1].append(("DL",1))
                    self.IC[-1].append(("C",self.literalTable[i][0]))
                    self.IC[-1].append(self.location)
                    self.location += 1
                    self.litTabPtr += 1
                    if i < len(self.literalTable) - 1:
                        self.IC.append([])
                self.poolTable.append(self.litTabPtr)
            elif line[1] == "ORIGIN":
                self.location = self.calculateLocation(line[2])
                self.IC[-1].append(("AD",3))
                self.IC[-1].append(("C",self.location))
            elif line[1] == "EQU":
                newlocation =  self.calculateLocation(line[2])
                self.symbolTable[line[0]] = newlocation
                self.IC[-1].append(("AD",4))
                self.IC[-1].append(("C",newlocation))
            elif line[1] == "DC":
                self.IC[-1].append(("DL",1))
                self.IC[-1].append(("C",int(line[2])))
                self.IC[-1].append(self.location)
                self.location += 1
            elif line[1] == "DS":
                self.IC[-1].append(("DL",2))
                self.IC[-1].append(("C",int(line[2])))
                self.IC[-1].append(self.location)
                self.location += int(line[2])
            elif line[1] == "STOP":
                self.IC[-1].append(("IS",0))
                self.IC[-1].append(self.location)
                self.location += 1
            elif line[1] == "END":
                self.IC[-1].append(("AD",2))
                if self.litTabPtr != len(self.literalTable):
                    # literalKeys = list(self.literalTable.keys())
                    for i in range(self.poolTable[-1],len(self.literalTable)):
                        self.IC.append([])
                        self.literalTable[i][1] = self.location
                        self.IC[-1].append(("DL",1))
                        self.IC[-1].append(("C",self.literalTable[i][0]))
                        self.IC[-1].append(self.location)
                        self.location += 1
                        self.litTabPtr += 1
                    self.poolTable.append(self.litTabPtr)
            elif line[1] == "PRINT":
                self.IC[-1].append(("IS",10))
                symTabKeys = list(self.symbolTable.keys())
                self.IC[-1].append(("S",symTabKeys.index(line[2])))
                self.IC[-1].append(self.location)
                self.location += 1
            elif line[1] == "READ":
                self.IC[-1].append(("IS",9))
                self.symbolTable[line[2]] = None
                symTabKeys = list(self.symbolTable.keys())
                self.IC[-1].append(("S",symTabKeys.index(line[2])))
                self.IC[-1].append(self.location)
                self.location += 1
            elif line[1] == "BC":
                self.IC[-1].append(("IS",7))
                classType = self.lookup.getClassType(line[2])
                machineCode = self.lookup.getMachineCode(line[2])
                self.IC[-1].append((classType,machineCode))
                if line[3]  not in self.symbolTable:
                    self.symbolTable[line[3]] = None
                symTabKeys = list(self.symbolTable.keys())
                self.IC[-1].append(("S",symTabKeys.index(line[3])))
                self.IC[-1].append(self.location)
                self.location += 1
            else:
                
                classType = self.lookup.getClassType(line[1])
                machineCode = self.lookup.getMachineCode(line[1])
                self.IC[-1].append((classType,machineCode))

                classType = self.lookup.getClassType(line[2])
                machineCode = self.lookup.getMachineCode(line[2])
                self.IC[-1].append((classType,machineCode))
                
                if "=" in line[3]:
                    constant = line[3].strip("=")
                    constant = int(constant.strip("'"))
                    self.literalTable[self.litTableIndex] = [constant,None]
                    self.IC[-1].append(("L",self.litTableIndex))
                    self.IC[-1].append(self.location)
                    self.litTableIndex += 1
                else:
                    if line[3] in self.symbolTable:
                        symbolTableKeys = list(self.symbolTable.keys())
                        self.IC[-1].append(("S",symbolTableKeys.index(line[3])))
                        self.IC[-1].append(self.location)
                    else:
                        self.symbolTable[line[3]] = None
                        symbolTableKeys = list(self.symbolTable.keys())
                        self.IC[-1].append(("S",symbolTableKeys.index(line[3])))
                        self.IC[-1].append(self.location)

                self.location += 1

        self.printLiteralTable()
        self.printSymbolTable()
        self.printPoolTable()
        self.printIntermdeiateCode()

    def printLiteralTable(self):
        tab = "\t"
        endline = "\n"
        print("\nLITERAL TABLE:")
        for item in range(len(self.literalTable)):
            line = str(item) + tab + str(self.literalTable[item][0]) + tab +str(self.literalTable[item][1]) + endline;
            print(line,end="")
            self.literalTableFile.write(line)
        self.literalTableFile.close()
        print("\n")


    def printSymbolTable(self):
        tab = "\t"
        endline = "\n"
        print("\nSYMBOL TABLE:")
        for index,item in enumerate(self.symbolTable):
            line = str(index) + tab + str(item) + tab + str(self.symbolTable[item]) + endline
            print(line,end="")
            self.symbolTableFile.write(line)
        self.symbolTableFile.close()
        print("\n")

    def printPoolTable(self):
        tab = "\t"
        endline = "\n"
        print("\nPOOL TABLE:")
        for item in range(len(self.poolTable)):
            print(self.poolTable[item])
            self.poolTableFile.write(str(self.poolTable[item]) + endline)
        self.poolTableFile.close()

    def printIntermdeiateCode(self):
        tab = "\t"
        endline = "\n"
        print("\nIntermediate Code:")
        for item in self.IC:
            line = ""
            for i in range(len(item)):
                line += str(item[i])
                if i != len(item):
                    line += tab
            line += endline
            print(line,end="")
            self.ICFile.write(line)
        self.ICFile.close()


obj = pass1()
obj.parseFile()




*********************************** Synchronized.Java ***************************************
import java.util.concurrent.Semaphore;
import java.util.Scanner;

public class ReaderWriterPrj {

    static Semaphore mutex = new Semaphore(1);    //mutex = 1
    static Semaphore wrt = new Semaphore(1);        //wrt = 1
    static int readCount = 0;
    static String message = "Hello";
    static Scanner SC = new Scanner(System.in);
    static class Reader implements Runnable {                    //Reader Thread
    public void run() {
            try {
                //Acquire Section
                mutex.acquire();                                      
                readCount++;
                if (readCount == 1) {
                    wrt.acquire();
                }
                mutex.release();
                //Reading section
                System.out.println("Thread "+Thread.currentThread().getName() + " is READING: " + message);
                Thread.sleep(1500);
                System.out.println("Thread "+Thread.currentThread().getName() + " has FINISHED READING");
                //Releasing section
                mutex.acquire();
                readCount--;
                if(readCount == 0) {
                    wrt.release();
                }
                mutex.release();
            } catch (InterruptedException e) {
                System.out.println(e.getMessage());
            }
        }
    }
    static class Writer implements Runnable {                       //Writer Thread
        public void run() {
            try {
                wrt.acquire();
                message = "Good Morning";
                System.out.println("Thread "+Thread.currentThread().getName() + " is WRITING: " + message);
                       
               
               
               
                Thread.sleep(1500);
                System.out.println("Thread "+Thread.currentThread().getName() + " has finished WRITING");
                wrt.release();
            } catch (InterruptedException e) {
                System.out.println(e.getMessage());
            }
        }
    }
//Main Program
    public static void main(String[] args) throws Exception {
        Reader read = new Reader();
        Writer write = new Writer();
        Thread r1 = new Thread(read);
        r1.setName("Reader1");
        Thread r2 = new Thread(read);
        r2.setName("Reader2");
        Thread r3 = new Thread(read);
        r3.setName("Reader3");
        Thread w1 = new Thread(write);
        w1.setName("Writer1");
        Thread w2 = new Thread(write);
        w2.setName("Writer2");
        Thread w3 = new Thread(write);
        w3.setName("Writer3");
        w1.start();
        r1.start();
        w2.start();
        r2.start();
        w3.start();
        r3.start();
       
       }
}


******************* 1. FCFS **********************

import java.util.Scanner;

class Process {
	int id, arrivalTime, burstTime, completionTime, turnaroundTime, waitingTime;

	Process(int id, int arrivalTime, int burstTime) {
		this.id = id;
		this.arrivalTime = arrivalTime;
		this.burstTime = burstTime;
	}
}

public class fcfs {
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);

		System.out.print("Enter the number of processes: ");
		int n = sc.nextInt();

		Process[] processes = new Process[n];

		for (int i = 0; i < n; i++) {
			System.out.print("Enter arrival time for process " + (i + 1) + ": ");
			int arrivalTime = sc.nextInt();
			System.out.print("Enter burst time for process " + (i + 1) + ": ");
			int burstTime = sc.nextInt();
			processes[i] = new Process(i + 1, arrivalTime, burstTime);
		}
		for (int i = 0; i < n - 1; i++) {
			for (int j = 0; j < n - i - 1; j++) {
				if (processes[j].arrivalTime > processes[j + 1].arrivalTime) {
					Process temp = processes[j];
					processes[j] = processes[j + 1];
					processes[j + 1] = temp;
				}
			}
		}
		int currentTime = 0;
		for (Process process : processes) {
			if (currentTime < process.arrivalTime) {
				currentTime = process.arrivalTime;
			}
			process.completionTime = currentTime + process.burstTime;
			process.turnaroundTime = process.completionTime - process.arrivalTime;
			process.waitingTime = process.turnaroundTime - process.burstTime;
			currentTime = process.completionTime;
		}

		double totalTurnaroundTime = 0;
		double totalWaitingTime = 0;

		System.out.println("\nProcess\tArrival Time\tBurst Time\tCompletion Time\tTurnaround Time\tWaiting Time");
		for (Process process : processes) {
			System.out.println(process.id + "\t\t" + process.arrivalTime + "\t\t" +  process.burstTime + "\t\t" + process.completionTime + "\t\t" + process.turnaroundTime + "\t\t" + process.waitingTime);
			totalTurnaroundTime += process.turnaroundTime;
			totalWaitingTime += process.waitingTime;
		}

		System.out.println("\nAverage Turnaround Time: " + (totalTurnaroundTime / n));
		System.out.println("Average Waiting Time: " + (totalWaitingTime / n));

		sc.close();
	}
}

******************* 2. ROUND ROBIN ********************
import java.util.*;
public class Main {
public static void main(String args[]) {
Scanner s = new Scanner(System.in);
int wtime[],btime[],rtime[],num,quantum,total;
wtime = new int[10];
btime = new int[10];
rtime = new int[10];
System.out.print("Enter number of processes(MAX 10): ");
num = s.nextInt();
System.out.print("Enter burst time");
for(int i=0;i<num;i++) { System.out.print("\nP["+(i+1)+"]: "); btime[i] = s.nextInt(); rtime[i] =
btime[i]; wtime[i]=0; } System.out.print("\n\nEnter quantum: "); quantum = s.nextInt(); int rp =
num; int i=0; int time=0; System.out.print("0"); wtime[0]=0; while(rp!=0) { if(rtime[i]>quantum)
{
rtime[i]=rtime[i]-quantum;
System.out.print(" | P["+(i+1)+"] | ");
time+=quantum;
System.out.print(time);
}
else if(rtime[i]<=quantum && rtime[i]>0)
{time+=rtime[i];
rtime[i]=rtime[i]-rtime[i];
System.out.print(" | P["+(i+1)+"] | ");
rp--;
System.out.print(time);
}
i++;
if(i==num)
{
i=0;
}
}
}
}

****************************** 3. SRTF ********************************
import java.util.*;
public class SRTF{
	public static void main(String[]args)
	{
		Scanner sc=new Scanner(System.in);
		System.out.println("Enter No.of Processes:");
		int n=sc.nextInt();
		int pid[]=new int[n];
		int at[]=new int[n];
		int bt[]=new int[n];
		int ct[]=new int[n];
		int ta[]=new int[n];
		int wt[]=new int[n];
		int f[]=new int[n];
		int k[]=new int[n];
		int i,st=0,tot=0;
		float avgwt=0,avgta=0;
		
		for(i=0;i<n;i++)
		{
			pid[i]=i+1;
			System.out.println("Enter Process"+(i+1)+"Arrival Time:");
			at[i]=sc.nextInt();
			System.out.println("Enter Process"+(i+1)+"Burst Time:");
			bt[i]=sc.nextInt();
			k[i]=bt[i];
			f[i]=0;
		}
	while(true)
		{
		int min=99,c=n;
		if(tot==n)
		break;
		
		for(i=0;i<n;i++)
		{
			if((at[i]<=st)&&(f[i]==0)&&(bt[i]<min))
			{
				min=bt[i];
				c=i;
			}
		
		}
		if(c==n)
		st++;
		else
		{
			bt[c]--;
			st++;
			if(bt[c]==0)
			{
				ct[c]=st;
				f[c]=1;
				tot++;
			}
		}
	}
	for(i=0;i<n;i++)
	{
		ta[i]=ct[i]-at[i];
		wt[i]=ta[i]-k[i];
		avgwt += wt[i];
		avgta += ta[i];
	}
	System.out.println("pid arrival burst complete turn waiting");
	for(i=0;i<n;i++)
	{
	System.out.println(pid[i]+"\t"+at[i]+"\t"+k[i]+"\t"+ct[i]+"\t"+ta[i]+"\t"+wt[i]);
	}
	System.out.println("\n Avg Tat is:"+(float)(avgta/n));
	System.out.println("\n Avg wt is:"+(float)(avgwt/n));	
	sc.close();
	}
}

*************************** 4. FIFO *******************************
import java.io.*;
public class FIFO {

    public static void main(String[] args) throws IOException 
    {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int frames, pointer = 0, hit = 0, fault = 0,ref_len;
        int buffer[];
        int reference[];
        int mem_layout[][];
        
        System.out.println("Please enter the number of Frames: ");
        frames = Integer.parseInt(br.readLine());
        
        System.out.println("Please enter the length of the Reference string: ");
        ref_len = Integer.parseInt(br.readLine());
        
        reference = new int[ref_len];
        mem_layout = new int[ref_len][frames];
        buffer = new int[frames];
        for(int j = 0; j < frames; j++)
                buffer[j] = -1;
        
        System.out.println("Please enter the reference string: ");
        for(int i = 0; i < ref_len; i++)
        {
            reference[i] = Integer.parseInt(br.readLine());
        }
        System.out.println();
        for(int i = 0; i < ref_len; i++)
        {
         int search = -1;
         for(int j = 0; j < frames; j++)
         {
          if(buffer[j] == reference[i])
          {
           search = j;
           hit++;
           break;
          } 
         }
         if(search == -1)
         {
          buffer[pointer] = reference[i];
          fault++;
          pointer++;
          if(pointer == frames)
           pointer = 0;
         }
            for(int j = 0; j < frames; j++)
                mem_layout[i][j] = buffer[j];
        }
        
        for(int i = 0; i < frames; i++)
        {
            for(int j = 0; j < ref_len; j++)
                System.out.printf("%3d ",mem_layout[j][i]);
            System.out.println();
        }
        
        System.out.println("The number of Hits: " + hit);
        System.out.println("Hit Ratio: " + (float)((float)hit/ref_len));
        System.out.println("The number of Faults: " + fault);
    }
    
}

***************************** 4. LRU **********************************
import java.io.*;
import java.util.*;

public class LRU {

    public static void main(String[] args) throws IOException 
    {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int frames,pointer = 0, hit = 0, fault = 0,ref_len;
        Boolean isFull = false;
        int buffer[];
        ArrayList<Integer> stack = new ArrayList<Integer>();
        int reference[];
        int mem_layout[][];
        
        System.out.println("Please enter the number of Frames: ");
        frames = Integer.parseInt(br.readLine());
        
        System.out.println("Please enter the length of the Reference string: ");
        ref_len = Integer.parseInt(br.readLine());
        
        reference = new int[ref_len];
        mem_layout = new int[ref_len][frames];
        buffer = new int[frames];
        for(int j = 0; j < frames; j++)
                buffer[j] = -1;
        
        System.out.println("Please enter the reference string: ");
        for(int i = 0; i < ref_len; i++)
        {
            reference[i] = Integer.parseInt(br.readLine());
        }
        System.out.println();
        for(int i = 0; i < ref_len; i++)
        {
            if(stack.contains(reference[i]))
            {
             stack.remove(stack.indexOf(reference[i]));
            }
            stack.add(reference[i]);
            int search = -1;
            for(int j = 0; j < frames; j++)
            {
                if(buffer[j] == reference[i])
                {
                    search = j;
                    hit++;
                    break;
                }
            }
            if(search == -1)
            {
             if(isFull)
             {
              int min_loc = ref_len;
                    for(int j = 0; j < frames; j++)
                    {
                     if(stack.contains(buffer[j]))
                        {
                            int temp = stack.indexOf(buffer[j]);
                            if(temp < min_loc)
                            {
                                min_loc = temp;
                                pointer = j;
                            }
                        }
                    }
             }
                buffer[pointer] = reference[i];
                fault++;
                pointer++;
                if(pointer == frames)
                {
                 pointer = 0;
                 isFull = true;
                }
            }
            for(int j = 0; j < frames; j++)
                mem_layout[i][j] = buffer[j];
        }
        
        for(int i = 0; i < frames; i++)
        {
            for(int j = 0; j < ref_len; j++)
                System.out.printf("%3d ",mem_layout[j][i]);
            System.out.println();
        }
        
        System.out.println("The number of Hits: " + hit);
        System.out.println("Hit Ratio: " + (float)((float)hit/ref_len));
        System.out.println("The number of Faults: " + fault);
    }
    
}

**************************** 5. OPTIMAL *************************
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
public class OPTIMAL{

    public static void main(String[] args) throws IOException 
    {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int frames, pointer = 0, hit = 0, fault = 0,ref_len;
        boolean isFull = false;
        int buffer[];
        int reference[];
        int mem_layout[][];
        
        System.out.println("Please enter the number of Frames: ");
        frames = Integer.parseInt(br.readLine());
        
        System.out.println("Please enter the length of the Reference string: ");
        ref_len = Integer.parseInt(br.readLine());
        
        reference = new int[ref_len];
        mem_layout = new int[ref_len][frames];
        buffer = new int[frames];
        for(int j = 0; j < frames; j++)
                buffer[j] = -1;
        
        System.out.println("Please enter the reference string: ");
        for(int i = 0; i < ref_len; i++)
        {
            reference[i] = Integer.parseInt(br.readLine());
        }
        System.out.println();
        for(int i = 0; i < ref_len; i++)
        {
         int search = -1;
         for(int j = 0; j < frames; j++)
         {
          if(buffer[j] == reference[i])
          {
           search = j;
           hit++;
           break;
          } 
         }
         if(search == -1)
         {
          if(isFull)
          {
           int index[] = new int[frames];
           boolean index_flag[] = new boolean[frames];
           for(int j = i + 1; j < ref_len; j++)
           {
            for(int k = 0; k < frames; k++)
            {
             if((reference[j] == buffer[k]) && (index_flag[k] == false))
             {
              index[k] = j;
              index_flag[k] = true;
              break;
             }
            }
           }
           int max = index[0];
           pointer = 0;
           if(max == 0)
            max = 200;
           for(int j = 0; j < frames; j++)
           {
            if(index[j] == 0)
             index[j] = 200;
            if(index[j] > max)
            {
             max = index[j];
             pointer = j;
            }
           }
          }
          buffer[pointer] = reference[i];
          fault++;
          if(!isFull)
          {
           pointer++;
              if(pointer == frames)
              {
               pointer = 0;
               isFull = true;
              }
          }
         }
            for(int j = 0; j < frames; j++)
                mem_layout[i][j] = buffer[j];
        }
        
        for(int i = 0; i < frames; i++)
        {
            for(int j = 0; j < ref_len; j++)
                System.out.printf("%3d ",mem_layout[j][i]);
            System.out.println();
        }
        
        System.out.println("The number of Hits: " + hit);
        System.out.println("Hit Ratio: " + (float)((float)hit/ref_len));
        System.out.println("The number of Faults: " + fault);
    }
    
}